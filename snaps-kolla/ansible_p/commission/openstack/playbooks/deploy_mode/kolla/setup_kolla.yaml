---
# Copyright 2017 ARICENT HOLDINGS LUXEMBOURG SARL. and
# Cable Television Laboratories, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- hosts: "{{ target }}"
  become: true
#  become_user: root
  vars_files:
    - "{{ PROXY_DATA_FILE }}"
    - "{{ VARIABLE_FILE }}"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ no_proxy }}"
  tasks:

    - name: apt-get update
      apt:
        update_cache: yes 
    
    - name: Install python-pip
      apt:
        name: python-pip
        state: latest
    - name: upgrade ip
      command: pip install --upgrade pip
    - name: Install OpenSSL
      command: pip install pyOpenSSL
      when: GIT_BRANCH == "stable/newton"
          
    - name: Install dependencies
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - python-dev
        - libffi-dev
        - gcc
        - libssl-dev
        - python-selinux
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - libltdl7
    - name: Install git
      apt:
        name: git
        update_cache: yes
        state: latest

    - name: Copy kolla
      copy:
         src: "{{BASE_FILE_PATH}}kolla.tar.gz"
         dest: /etc/OpenStack/
      when: GIT_BRANCH == "stable/newton"
    - name: untar kolla
      command: tar -xvzf /etc/OpenStack/kolla.tar.gz -C /etc/OpenStack/
      when: GIT_BRANCH == "stable/newton"

    - name: Clone git
      git:
        repo: https://git.openstack.org/openstack/kolla
        version: "{{ GIT_BRANCH }}"
        dest: "{{ GIT_CLONE_PATH }}"
      when: GIT_BRANCH == "stable/pike"


    - name: switch to newton branch
      command: git checkout "{{ GIT_BRANCH }}"
      args:
       chdir: "{{ GIT_CLONE_PATH }}"
      when: GIT_BRANCH == "stable/pike"



    - name: Copying Docker package file in /home/ubuntu
      copy:
       src: "{{BASE_FILE_PATH}}docker-engine_1.12.0-0-xenial_amd64.deb"
       dest: "{{ DOCKER_LIST_DEST }}"
      when: GIT_BRANCH == "stable/newton"

    - name: Copying Docker package file in /home/ubuntu
      copy:
       src: "{{BASE_FILE_PATH}}docker-engine_17.05.0-ce-0-ubuntu-xenial_amd64.deb"
       dest: "{{ DOCKER_LIST_DEST_PIKE }}"
      when: GIT_BRANCH == "stable/pike"


    - name: install additional packages
      command: apt-get -y install apt-transport-https ca-certificates
      when: GIT_BRANCH == "stable/newton"


    - name: dpkgi -i docker-engine=1.12.0-0~xenial
      command: dpkg -i "{{ DOCKER_LIST_DEST }}"
      when: GIT_BRANCH == "stable/newton"

    - name: dpkgi -i docker-engine=17.05~xenial
      command: dpkg -i "{{ DOCKER_LIST_DEST_PIKE }}"
      when: GIT_BRANCH == "stable/pike"


    - name: apt-get update again
      apt:
        update_cache: yes
      when: GIT_BRANCH == "stable/pike"

    - name: Make directory docker.service.d
      file: 
       dest: /etc/systemd/system/docker.service.d
       state: directory 

    - name: Copy http-proxy.conf in the docker.service.d directory
      copy:
       src: "{{BASE_FILE_PATH}}http-proxy_bak.conf"
       dest: "{{ HTTP_PROXY_DEST }}"



    - name: replace data in http-proxy.conf
      lineinfile:
        dest: "{{ HTTP_PROXY_DEST }}"
        regexp: 'Environment="HTTP_PROXY="'
        line: 'Environment="HTTP_PROXY={{ http_proxy }}"'


    - name: Copy kolla.conf in the docker.service.d directory
      when: GIT_BRANCH == "stable/newton"
      copy:
       src: "{{BASE_FILE_PATH}}kolla.conf"
       dest: "{{ KOLLA_CONF_DEST }}" 


    - name: Copy kolla.conf in the docker.service.d directory
      when: GIT_BRANCH == "stable/pike"
      copy:
       src: "{{BASE_FILE_PATH}}kolla_pike.conf"
       dest: "{{ KOLLA_CONF_DEST_PIKE }}"

    - name: Install ansible
      pip:
       name: ansible
       version: 2.0.0.2
      when: GIT_BRANCH == "stable/newton"

    - name: Install ansible
      pip:
       name: ansible
       version: 2.2.2.0
      when: GIT_BRANCH == "stable/pike"
   
    - name: Install docker-py
      pip:
       name: docker-py
       version: 1.7.2
      when: GIT_BRANCH == "stable/newton"

    - name:  insert docker_opts in docker
      lineinfile:
        dest: "{{ DEFAULT_DOCKER_FILE }}"
        regexp: '^(.*)#DOCKER_OPTS="--dns 8.8.8.8 --dns 8.8.4.4"(.*)$'
        line: 'DOCKER_OPTS= "{{ DOCKER_OPTS }}"'
     
    - name: copy the file
      command: cp "{{ DOCKER_SERVICE_SRC }}" "{{ DOCKER_SERVICE_DEST }}"

    - name: append data in docker.service
      lineinfile:
        dest: "{{ DOCKER_SERVICE_DEST }}"
        line: "EnvironmentFile=-/etc/default/docker \nMountFlags=shared"
        insertafter: '^\[Service\]'
        state: present

    - name: replace data in docker.service
      lineinfile:
        dest: "{{ DOCKER_SERVICE_DEST }}"
        regexp: 'ExecStart=/usr/bin/dockerd -H fd://'
        line: "ExecStart=/usr/bin/dockerd -H fd:// $DOCKER_OPTS"

    - name: changes in docker  http-proxy file
      lineinfile:
        dest: "{{ HTTP_PROXY_DEST }}"
        regexp: 'Environment="HTTP_PROXY={{ http_proxy }}"'
        line: 'Environment="HTTP_PROXY={{ http_proxy }}" "NO_PROXY={{ no_proxy }}"'


    - name: copy daemon.json
      copy:
       src: "{{BASE_FILE_PATH}}daemon.json"
       dest: "{{ DAEMON_DOCKER_FILE_DEST }}"



    - name: systemctl daemon-reload
      command: systemctl daemon-reload

    - name: systemctl restart docker
      command: systemctl restart docker


    - name: install requirements
      pip:
        requirements: "{{ REQUIREMENT_KOLLA }}"

    - name: install test requirements
      pip:
        requirements: "{{ TEST_REQUIREMENT_KOLLA }}"

    - name : install kolla
      command: pip install "{{ GIT_CLONE_PATH }}"

    - name: install tox
      pip:
         name: tox


    - name : genconfig command
      command: tox -e genconfig	
      args:
         chdir: "{{ GIT_CLONE_PATH }}"


#    - name: run start-registry command
#      command: docker run -d -p 4000:5000 --restart=always --name registry  registry:2
#
#    - name: Push docker images into the registry
#      ignore_errors: True
#      command: kolla-build --base "{{ kolla_base }}" --type "{{ kolla_install }}" --registry "{{ DOCKER_REGISTRY_IP }}"  --push
