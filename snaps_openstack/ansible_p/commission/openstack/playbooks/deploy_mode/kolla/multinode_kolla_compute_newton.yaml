---
# Copyright 2017 ARICENT HOLDINGS LUXEMBOURG SARL. and
# Cable Television Laboratories, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- hosts: "{{ target }}"
  become: true
#  become_user: root
  vars_files:
    - "{{ PROXY_DATA_FILE }}"
    - "{{ VARIABLE_FILE }}"
    - "{{BASE_FILE_PATH}}globals.yml"
    - "{{BASE_FILE_PATH}}netvars.yml"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ no_proxy }}"
  tasks:

    - name: apt-get update
      apt:
        update_cache: yes

    - name: Install python-pip
      apt:
        name: python-pip
        state: latest

    - name: Install dependencies
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - python-dev
        - libffi-dev
        - gcc
        - libssl-dev
        - libltdl7
    - name: Install git
      apt:
        name: git
        update_cache: yes
        state: latest
    - name: Copy kolla
      copy:
         src: "{{BASE_FILE_PATH}}kolla.tar.gz"
         dest: /etc/OpenStack/
    - name: untar kolla
      command: tar -xvzf /etc/OpenStack/kolla.tar.gz -C /etc/OpenStack/
#    - name: Clone git
#      git:
#        repo: https://git.openstack.org/openstack/kolla
#        version: stable/newton
#        dest: "{{ GIT_CLONE_PATH }}"
#

#    - name: switch to newton branch
#      command: git checkout stable/newton
#      args:
#       chdir: "{{ GIT_CLONE_PATH }}"


    - name: Copying Docker package file in /home/ubuntu
      copy:
       src: "{{BASE_FILE_PATH}}docker-engine_1.12.0-0-xenial_amd64.deb"
       dest: "{{ DOCKER_LIST_DEST }}"

    - name: install additional packages
      command: apt-get -y install apt-transport-https ca-certificates

    - name: apt-get update again
      apt:
        update_cache: yes


    - name: dpkgi -i docker-engine=1.12.0-0~xenial
      command: dpkg -i "{{ DOCKER_LIST_DEST }}"

    - name: Install ntp
      apt:
       name: ntp
       state: latest


    - name: Make directory docker.service.d
      file:
       dest: /etc/systemd/system/docker.service.d
       state: directory

    - name: Copy http-proxy.conf in the docker.service.d directory
      copy:
       src: "{{BASE_FILE_PATH}}http-proxy_bak.conf"
       dest: "{{ HTTP_PROXY_DEST }}"


    - name: replace data in http-proxy.conf
      lineinfile:
        dest: "{{ HTTP_PROXY_DEST }}"
        regexp: 'Environment="HTTP_PROXY="'
        line: 'Environment="HTTP_PROXY={{ http_proxy }}"'



    - name: Copy kolla.conf in the docker.service.d directory
      copy:
       src: "{{BASE_FILE_PATH}}kolla.conf"
       dest: "{{ KOLLA_CONF_DEST }}"


    - name: systemctl daemon-reload
      command: systemctl daemon-reload

    - name: systemctl restart docker
      command: systemctl restart docker

    - name: Install ansible
      pip:
       name: ansible
       version: 2.0.0.2

    - name: Install docker-py
      pip:
       name: docker-py
       version: 1.6.0

#    - name: insert docker_opts in docker
#      lineinfile:
#        dest: "{{ DEFAULT_DOCKER_FILE }}"
#        line: 'DOCKER_OPTS="{{ DOCKER_OPTS }}"'

    - name:  insert docker_opts in docker
      lineinfile:
        dest: "{{ DEFAULT_DOCKER_FILE }}"
        regexp: '^(.*)#DOCKER_OPTS="--dns 8.8.8.8 --dns 8.8.4.4"(.*)$'
        line: 'DOCKER_OPTS= "{{ DOCKER_OPTS }}"'


    - name: copy the file
      command: cp "{{ DOCKER_SERVICE_SRC }}" "{{ DOCKER_SERVICE_DEST }}"

    - name: append data in docker.service
      lineinfile:
        dest: "{{ DOCKER_SERVICE_DEST }}"
        line: "EnvironmentFile=-/etc/default/docker \nMountFlags=shared"
        insertafter: '^\[Service\]'
        state: present

    - name: replace data in docker.service
      lineinfile:
        dest: "{{ DOCKER_SERVICE_DEST }}"
        regexp: 'ExecStart=/usr/bin/dockerd -H fd://'
        line: "ExecStart=/usr/bin/dockerd -H fd:// $DOCKER_OPTS"

    - name:
      lineinfile:
        dest: "{{ HTTP_PROXY_DEST }}"
        regexp: 'Environment="HTTP_PROXY={{ http_proxy }}"'
        line: 'Environment="HTTP_PROXY={{ http_proxy }}" "NO_PROXY=localhost,{{ no_proxy }}"'

    - name: copy daemon.json
      copy:
       src: "{{BASE_FILE_PATH }}daemon.json"
       dest: "{{ DAEMON_DOCKER_FILE_DEST }}"

#Changes for MTU size
#    - name: Modifying neutron.conf for MTU size
#      command: find /etc/kolla -type f -exec sed -i 's/core_plugin = ml2/core_plugin = ml2\nglobal_physnet_mtu = {{ MTU_SIZE }}/g' {} \;
#      ignore_errors: True
#    - name: Modifying ml2_conf.ini for MTU size
#      command: find /etc/kolla -type f -exec sed -i 's/type_drivers = flat,vlan,vxlan/type_drivers = flat,vlan,vxlan\npath_mtu = {{ MTU_SIZE }}/g' {} \;
#      ignore_errors: True

    - name: systemctl daemon-reload
      command: systemctl daemon-reload

    - name: systemctl restart docker
      command: systemctl restart docker

    - name: Extract IP of the neutron_external_interface
      shell: ip a show "{{ neutron_external_interface }}" | grep inet | grep global | awk '{ print$2}'
      register: extip
    - debug:
        var: extip
        
    - name: insert/update br-ex & default configuration in /etc/network/interfaces
      blockinfile:
        path: /etc/network/interfaces
        backup: yes
        block: |
           auto br-ex
           iface br-ex inet static
               address {{ item }}
               netmask 255.255.255.0
               gateway "{{ external_gw }}"

           up route add default gw "{{ external_gw }}" dev br-ex
        state: present
      with_items: "{{extip.stdout_lines|list}}"
      ignore_errors: True


#    - name: Flush IP from neutron_external_interface
#      command: ip addr flush  "{{ neutron_external_interface }}"
#      ignore_errors: True
#      when: extip!= ""



#    - name: insert/update br-ex & default configuration in /etc/network/interfaces
#      blockinfile:
#        path: /etc/network/interfaces
#        backup: yes
#        block: |
#           auto br-ex
#           iface br-ex inet static
#               address {{ item }}
#               netmask 255.255.255.0
#               gateway "{{ external_gw }}"
#
#           up route add default gw "{{ external_gw }}" dev br-ex
#        state: present
#      with_items: "{{extip.stdout_lines|list}}"
#      ignore_errors: True

#    - name: Configuring nodes with static ip
#      lineinfile:
#          dest: /etc/network/interfaces
#          state: present
#          backrefs: yes
#          regexp: 'iface {{ network_interface }} inet dhcp'
#          line: "iface {{ network_interface }} inet static\naddress {{ target }}\nnetmask 255.255.255.0\ngateway {{ external_gw }}"
#
#    - name: Restart networking service
#      command: /etc/init.d/networking restart

#    - name: Delete conn neutron_external_interface using nmcli
#      command: ifconfig "{{ neutron_external_interface }}" 0 up
#      command: nmcli conn del "{{ neutron_external_interface #}}"
#      ignore_errors: True
