---
- hosts: "{{ target }}"
  become: true
  vars_files:
    - "{{ PROXY_DATA_FILE }}"
    - "{{ VARIABLE_FILE }}"
    - "{{BASE_FILE_PATH}}globals.yml"
    - "{{BASE_FILE_PATH}}netvars.yml"

  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ no_proxy }}"

  tasks:

    - name: load uio_pci_generic kernel module
      shell: modprobe uio_pci_generic
      ignore_errors: True
      when: enable_ovs_dpdk == "yes"
    - name: load vfio_pci kernel module
      shell: modprobe vfio_pci
      ignore_errors: True
      when: enable_ovs_dpdk == "yes"

    - name: add line to /etc/modules
      lineinfile:
       dest: /etc/modules
       line: 'uio_pci_generic'
      when: enable_ovs_dpdk == "yes"
    - name: add line to /etc/modules
      lineinfile:
       dest: /etc/modules
       line: 'vfio_pci'
      when: enable_ovs_dpdk == "yes"


    - name: apt-get update
      apt:
        update_cache: yes

    - name: Install dependencies
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - python-dev
        - libffi-dev
        - gcc
        - libssl-dev
        - python-selinux
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - libltdl7
        - git
        - python-pip
        - ntp
        - parted
        - aufs-tools
        - network-manager
        - crudini

    - name: upgrade pip
      command: pip install --upgrade pip

    - name: install python-openstackclient
      pip:
        name: python-openstackclient

    - name: install python-neutronclient
      pip:
        name: python-neutronclient

    - name: install python-novaclient
      pip:
        name: python-novaclient

    - name: upgrade pyOpenSSL
      command: pip install --upgrade pyOpenSSL

    - name: Delete existing {{ GIT_CLONE_PATH_PIKE }}
      file:
        state: absent
        dest: "{{ GIT_CLONE_PATH_PIKE }}"

    - name: Clone git
      git:
        repo: https://github.com/openstack/kolla-ansible.git
        version: "{{ GIT_BRANCH }}"
        dest: "{{ GIT_CLONE_PATH_PIKE }}"

    - name: switch to pike branch
      command: git checkout "{{ GIT_BRANCH }}"
      args:
       chdir: "{{ GIT_CLONE_PATH_PIKE }}"
      when: (KOLLA_ANSIBLE_TAG is undefined) or (KOLLA_ANSIBLE_TAG is none) or (KOLLA_ANSIBLE_TAG | trim == '') 

    - name: switch to pike via tag
      command: "git checkout tags/{{ KOLLA_ANSIBLE_TAG }}"
      args:
       chdir: "{{ GIT_CLONE_PATH_PIKE }}"
      when: not((KOLLA_ANSIBLE_TAG is undefined) or (KOLLA_ANSIBLE_TAG is none) or (KOLLA_ANSIBLE_TAG | trim == ''))
 
    - name: install requirements
      pip:
        requirements: "{{ REQUIREMENT_KOLLA_ANSIBLE }}"

    - name: replace data in ovsdpdk-db.json.j2
      lineinfile:
        dest: "{{GIT_CLONE_PATH_PIKE}}/ansible/roles/ovs-dpdk/templates/ovsdpdk-db.json.j2"
        regexp: '^(.*)    "command": "start-ovsdb-server(.*)$'
        line: '    "command": "start-ovsdb-server 127.0.0.1",'
        backrefs: yes
    - name: replace data in setup.cfg
      lineinfile:
        dest: "{{ GIT_CLONE_PATH_PIKE }}/setup.cfg"
        line: "    share/kolla-ansible/tools = tools/ovs-dpdkctl.sh"
        insertafter: '^\    share/kolla-ansible/tools = tools/stop-containers'
        state: present

    - name: run setup.py
      command: python setup.py install
      args:
       chdir: "{{ GIT_CLONE_PATH_PIKE }}"

    - name: apt-get update again
      apt:
        update_cache: yes

    - name: run start-registry command
      command: docker run -d -p 4000:5000 --restart=always --name registry  registry:2
      ignore_errors: True
      when: PULL_HUB != "yes"

    - name: replace data in init-runonce script
      ignore_errors: True
      replace:
        dest: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
        regexp: ^(.*)EXT_NET_CIDR='10.0.2.0/24'(.*)$
        replace: EXT_NET_CIDR='{{EXT_SUB}}'

    - name: replace data in init-runonce script
      ignore_errors: True
      replace:
        dest: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
        regexp: ^(.*)EXT_NET_RANGE='start=10.0.2.150,end=10.0.2.199'(.*)$
        replace: EXT_NET_RANGE='start={{START_IP}},end={{END_IP}}'

    - name: replace data in init-runonce script
      ignore_errors: True
      replace:
        dest: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
        regexp: ^(.*)EXT_NET_GATEWAY='10.0.2.1'(.*)$
        replace: EXT_NET_GATEWAY='{{EXT_GW}}'

    - name: replace data in init-runonce script
      ignore_errors: True
      replace:
        dest: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
        regexp: '^(.*)openstack subnet create --no-dhcp (.*)$'
        replace: 'openstack subnet create \\'

    - lineinfile:
       destfile: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
       line: 'openstack role add --project admin --user admin heat_stack_owner'
       insertbefore: 'cat << EOF'

    - lineinfile:
       destfile: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
       line: 'openstack flavor set m1.large --property hw:mem_page_size=large'
       insertbefore: 'cat << EOF'
      ignore_errors: True
      when: enable_ovs_dpdk == "yes"
      
    - lineinfile:
       destfile: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
       line: 'openstack flavor set m1.medium --property hw:mem_page_size=large'
       insertbefore: 'cat << EOF'
      ignore_errors: True
      when: enable_ovs_dpdk == "yes"
      
    - lineinfile:
       destfile: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
       line: 'openstack flavor set m1.small --property hw:mem_page_size=large'
       insertbefore: 'cat << EOF'
      ignore_errors: True
      when: enable_ovs_dpdk == "yes"
      
    - lineinfile:
       destfile: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
       line: 'openstack flavor set m1.tiny --property hw:mem_page_size=large'
       insertbefore: 'cat << EOF'
      ignore_errors: True
      when: enable_ovs_dpdk == "yes"
      
    - lineinfile:
       destfile: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
       line: 'openstack flavor set m1.xlarge --property hw:mem_page_size=large'
       insertbefore: 'cat << EOF'
      ignore_errors: True
      when: enable_ovs_dpdk == "yes"

    - lineinfile:
       destfile: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
       line: 'curl -L -o ./Fedora-Atomic-25-20170512.2.x86_64.qcow2 https://ftp-stud.hs-esslingen.de/pub/Mirrors/alt.fedoraproject.org/atomic/stable/Fedora-Atomic-25-20170512.2/CloudImages/x86_64/images/Fedora-Atomic-25-20170512.2.x86_64.qcow2'
       insertbefore: 'echo Configuring neutron.'

    - lineinfile:
       destfile: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
       line: "openstack image create --public --property os_distro='fedora-atomic' --disk-format qcow2 --container-format bare --file ./Fedora-Atomic-25-20170512.2.x86_64.qcow2 fedora-atomic.qcow2"
       insertbefore: 'echo Configuring neutron.'


    - name: Copying Docker package file in /home/ubuntu
      copy:
       src: "{{BASE_FILE_PATH}}docker-engine_17.05.0-ce-0-ubuntu-xenial_amd64.deb"
       dest: "{{ DOCKER_LIST_DEST_PIKE }}"

    - name: dpkg -i docker-engine=17.05~xenial
      command: dpkg -i "{{ DOCKER_LIST_DEST_PIKE }}"


    - name: apt-get update again
      apt:
        update_cache: yes


    - name: Make directory docker.service.d
      file:
       dest: /etc/systemd/system/docker.service.d
       state: directory

    - name: Copy http-proxy.conf in the docker.service.d directory
      copy:
       src: "{{BASE_FILE_PATH}}http-proxy_bak.conf"
       dest: "{{ HTTP_PROXY_DEST }}"

    - name: replace data in http-proxy.conf
      lineinfile:
        dest: "{{ HTTP_PROXY_DEST }}"
        regexp: 'Environment="HTTP_PROXY="'
        line: 'Environment="HTTP_PROXY={{ http_proxy }}"'
    - name: Copy kolla.conf in the docker.service.d directory
      when: GIT_BRANCH == "stable/pike"
      copy:
       src: "{{BASE_FILE_PATH}}kolla_pike.conf"
       dest: "{{ KOLLA_CONF_DEST_PIKE }}"

    - name: Install ansible
      pip:
       name: ansible
       version: 2.2.2.0

    - name: Install ansible for dpdk
      pip:
       name: ansible
       version: 2.3.1.0
      when: enable_ovs_dpdk == "yes"

    - name:  insert docker_opts in docker
      lineinfile:
        dest: "{{ DEFAULT_DOCKER_FILE }}"
        regexp: '^(.*)#DOCKER_OPTS="--dns 8.8.8.8 --dns 8.8.4.4"(.*)$'
        line: 'DOCKER_OPTS= "{{ DOCKER_OPTS }}"'

    - name: copy the file
      command: cp "{{ DOCKER_SERVICE_SRC }}" "{{ DOCKER_SERVICE_DEST }}"

    - name: append data in docker.service
      lineinfile:
        dest: "{{ DOCKER_SERVICE_DEST }}"
        line: "EnvironmentFile=-/etc/default/docker \nMountFlags=shared"
        insertafter: '^\[Service\]'
        state: present

    - name: replace data in docker.service
      lineinfile:
        dest: "{{ DOCKER_SERVICE_DEST }}"
        regexp: 'ExecStart=/usr/bin/dockerd -H fd://'
        line: "ExecStart=/usr/bin/dockerd -H fd:// $DOCKER_OPTS"

    - name: changes in docker  http-proxy file
      lineinfile:
        dest: "{{ HTTP_PROXY_DEST }}"
        regexp: 'Environment="HTTP_PROXY={{ http_proxy }}"'
        line: 'Environment="HTTP_PROXY={{ http_proxy }}" "NO_PROXY={{ no_proxy }}"'

    - name: copy daemon.json
      copy:
       src: "{{BASE_FILE_PATH}}daemon.json"
       dest: "{{ DAEMON_DOCKER_FILE_DEST }}"
      when: PULL_HUB != "yes"

    - name: systemctl daemon-reload
      command: systemctl daemon-reload

    - name: systemctl restart docker
      command: systemctl restart docker

    - name: add line to /etc/modules
      lineinfile:
       dest: /etc/modules
       line: 'configfs'
      when: enable_cinder == "yes"

    - name: update-initramfs
      command: update-initramfs -u
      ignore_errors: True
      when: enable_cinder == "yes"
    - name: systemctl stop open-iscsi
      command: systemctl stop open-iscsi
      when: enable_cinder == "yes"
    - name: systemctl disable open-iscsi
      command: systemctl disable open-iscsi
      when: enable_cinder == "yes"
    - name: systemctl stop iscsid
      command: systemctl stop iscsid
      when: enable_cinder == "yes"
    - name: systemctl disable iscsid
      command: systemctl disable iscsid
      when: enable_cinder == "yes"

    - name: add line to all.yml
      when: http_proxy!="" and enable_magnum == "yes"
      lineinfile:
       dest: "{{ ALL_DEST_PIKE }}"
       line: 'container_proxy: {}'


    - name: Copy main.yml
      when: http_proxy!="" and enable_magnum == "yes"
      copy:
       src: "{{BASE_FILE_PATH}}main.yml"
       dest: "{{ MAIN_DEST_PIKE }}"

    - name: Copy contents of /etc/OpenStack/kolla-ansible/etc/kolla/ to /etc/kolla
      command: cp -r /etc/OpenStack/kolla-ansible/etc/kolla/ /etc/

    - name: Copy /usr/local/share/kolla/ansible/inventory/ to /etc/kolla_packages/source/
      copy:
       src: "{{BASE_FILE_PATH}}inventory"
       dest: "{{ INVENTORY_DEST }}"

    - name: Copy globals.yml in the /etc/kolla directory
      copy:
       src: "{{BASE_FILE_PATH}}globals.yml"
       dest: "{{ GLOBAL_FILE_DEST }}"

    - name: Make directory config
      file:
       dest: /etc/kolla/config/neutron
       state: directory

    - name: Copy ml2_conf.ini
      copy:
       src: "{{BASE_FILE_PATH}}ml2_conf.ini"
       dest: "/etc/kolla/config/neutron/ml2_conf.ini"
      when : enable_ovs_dpdk == "yes"


    - name: cleanup-dangling images
      shell: ./cleanup-images --dangling
      when: GIT_BRANCH == "stable/pike"
      args:
       chdir: /etc/OpenStack/kolla-ansible/tools
       executable: /bin/bash
      ignore_errors: True

    - name: Fetch docker repository tag
      shell: docker images | grep horizon | awk '{print $2}'
      register: tag
    - debug:
        var: tag

    - name: adding openstack release tag in globals.yaml
      lineinfile:
       dest: /etc/kolla/globals.yml
       line: 'openstack_release: "{{tag.stdout}}"'
       insertafter: '#openstack_release: "auto"'
      when: PULL_HUB != "yes" and GET_TAG

    - name: kolla generate passwords
      command: kolla-genpwd

    - name: kolla ansible prechecks with file {{ MULTINODE_FILE }}
      command: kolla-ansible prechecks  -i "{{ MULTINODE_FILE }}"
      register: out
      ignore_errors: True
    - debug: var=out.stdout_lines
    - debug: var=out.stderr_lines

    - name: Validating task [kolla ansible prechecks] returned 0
      fail: msg="kolla-ansible prechecks command failed"
      when: out.rc != 0 and enable_ovs_dpdk == "no"

    - name: kolla ansible pull with file {{ MULTINODE_FILE }}
      command: kolla-ansible pull  -i "{{ MULTINODE_FILE }}"
      when: PULL_HUB == "yes"

    - name: kolla-ansible deploy with file {{ MULTINODE_FILE }}
      command: kolla-ansible deploy  -i "{{ MULTINODE_FILE }}"
      register: out
      ignore_errors: True
    - debug: var=out.stdout_lines
    - debug: var=out.stderr_lines

    - name: Validating task [kolla-ansible deploy] returned 0
      fail: msg="kolla-ansible deploy command failed"
      when: out.rc != 0

    - name: kolla-ansible post-deploy
      command: kolla-ansible post-deploy
      register: out
      ignore_errors: True
    - debug: var=out.stdout_lines
    - debug: var=out.stderr_lines

    - name: Validating task [kolla-ansible post-deploy] returned 0
      fail: msg="kolla-ansible post-deploy command failed"
      when: out.rc != 0

    - name: Extract IP of the neutron_external_interface - {{ neutron_external_interface }}
      shell: ip a show "{{ neutron_external_interface }}" | grep inet | grep global | awk '{ print$2}'
      register: extip
    - debug:
        var: extip

    - name: Flush IP from neutron_external_interface - {{ neutron_external_interface }}
      command: ip addr flush  "{{ neutron_external_interface }}"
      ignore_errors: True

    - name : Fetching public MAC
      shell: cat /sys/class/net/{{neutron_external_interface}}/address
      register: public_mac
      when: enable_ovs_dpdk == "no"
    - debug:
        var:  public_mac
      when: enable_ovs_dpdk == "no"
    - name : Setting MAC on br-ex
      shell : docker exec openvswitch_vswitchd bash -c  'ovs-vsctl -- set bridge br-ex other-config:hwaddr=\"{{ public_mac.stdout }}\"'
      when: enable_ovs_dpdk == "no"

    - name: Set Ip to BR-ex - {{ item }}
      command: ip addr add {{ item }} dev br-ex
      with_items: "{{extip.stdout_lines|list}}"
      when: enable_ovs_dpdk == "no"

    - pause:
        seconds: 5

    - name: Bring br-ex interface up
      command: ip link set br-ex up
      when: enable_ovs_dpdk == "no"

    - pause:
        seconds: 5

    - name: Set Br-ex a defaults gateway route on nic {{ external_gw }}
      command: ip route add default via "{{ external_gw }}" dev br-ex
      ignore_errors: True
      when: enable_ovs_dpdk == "no"

    - stat: path=/etc/network/interfaces.d/br-ex.cfg
      register: interfaceFile

    - name: create new interfaces file for br-ex
      file: path=/etc/network/interfaces.d/br-ex.cfg state=touch
      when: interfaceFile.stat.exists is defined and not interfaceFile.stat.exists and enable_ovs_dpdk == "no"

#    - fail:
#        msg: "br-ex.cfg exist"
#      when: p.stat.exists is defined and p.stat.exists

    - name: insert/update br-ex & default configuration in network interfaces file
      lineinfile:
        dest: /etc/network/interfaces.d/br-ex.cfg
        backup: yes
        line: "auto br-ex\n
           iface br-ex inet static\n
               address {{ item }}\n
               netmask 255.255.255.0\n"
        state: present
      with_items: "{{extip.stdout_lines.0}}"
      ignore_errors: True
      when: enable_ovs_dpdk == "no" and not interfaceFile.stat.exists
    - name: add default route
      shell: "route add default gw {{ external_gw }} dev dpdk_bridge"
      when: enable_ovs_dpdk == "yes"

    - name: insert/update dpdk_bridge & default configuration in network interfaces file
      lineinfile:
        dest: /etc/network/interfaces.d/dpdk_bridge.cfg
        backup: yes
        line: "gateway {{ external_gw }}"
        state: present
      ignore_errors: True
      when: enable_ovs_dpdk == "yes"

    - name: insert route details for br-ex
      lineinfile:
        dest: /etc/network/interfaces.d/br-ex.cfg
        backup: yes
        state: present
        line: "post-up ip addr add {{ extip.stdout_lines.1 }} dev br-ex\nup route add default gw {{ external_gw }} dev br-ex\npost-up sleep 5; for i in $(ip -6 r | grep {{ neutron_external_interface }} | awk {'print $1'}); do ip -6 r d $i dev {{ neutron_external_interface }}; done\npost-up ip addr flush {{ neutron_external_interface }}"
      ignore_errors: True
      when: enable_ovs_dpdk == "no" and not interfaceFile.stat.exists

    - name: Changing perm of "/etc/kolla/admin-openrc.sh", adding "+x"
      file: dest=/etc/kolla/admin-openrc.sh mode=a+x

    - name: install test requirements - {{ TEST_REQUIREMENT_KOLLA }}
      pip:
        requirements: "{{ TEST_REQUIREMENT_KOLLA }}"
      when: PULL_HUB != "yes"
      ignore_errors: True

    - name: run init-runonce
      shell: source /etc/kolla/admin-openrc.sh && /etc/OpenStack/kolla-ansible/tools/init-runonce
      args:
       executable: /bin/bash
      async: 900
      register: out
      ignore_errors: True
    - debug: var=out.ansible_job_id

    - name: Validating task [run init-runonce] is successful
      async_status:
        jid: "{{ out.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 60
      delay: 15

    - name: fetching external routes
      shell: route -A inet6 | grep '{{ neutron_external_interface }}' | awk {'print $1'}
      register: ext_route
      when: enable_ovs_dpdk == "no"

    - debug:
        var: ext_route.stdout_lines
      when: enable_ovs_dpdk == "no"

    - name: Deleting external routes
      shell: ip -6 r d {{ item }} dev '{{ neutron_external_interface }}'
      with_items:
         - "{{ ext_route.stdout_lines.0 }}" 
      ignore_errors: True
      when: enable_ovs_dpdk == "no"

    - name: check values for MTU parameters
      command: grep -inr global_physnet_mtu /etc/kolla
      register: global_physnet_mtu
      ignore_errors: True

    - name: Modifying neutron.conf for MTU size
      command: find /etc/kolla -type f -exec sed -i 's/core_plugin = ml2/core_plugin = ml2\nglobal_physnet_mtu = {{ DEFAULT }}/g' {} \;
      when: not global_physnet_mtu.stdout
      ignore_errors: True

    - name: Modifying ml2_conf.ini for MTU size
      command: find /etc/kolla -type f -exec sed -i 's/type_drivers = flat,vlan,vxlan/type_drivers = flat,vlan,vxlan\nphysical_network_mtus = physnet1:{{ DEFAULT }}\npath_mtu = {{ VXLAN}}/g' {} \;
      when: not global_physnet_mtu.stdout
      ignore_errors: True

    - name: systemctl daemon-reload
      command: systemctl daemon-reload

    - name: systemctl restart docker
      command: systemctl restart docker
