---
# Copyright 2017 ARICENT HOLDINGS LUXEMBOURG SARL. and
# Cable Television Laboratories, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- hosts: "{{ target }}"
  become: true
#  become_user: root
  vars_files:
    - "{{ PROXY_DATA_FILE }}"
    - "{{ VARIABLE_FILE }}"
    - "{{BASE_FILE_PATH}}globals.yml"
    - "{{BASE_FILE_PATH}}netvars.yml"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    ftp_proxy: "{{ ftp_proxy }}"
    no_proxy: "{{ no_proxy }}"
  tasks:
  
    - name: apt-get update
      apt:
        update_cache: yes 
    - name: apt-get install network-manager
      apt:
        name: network-manager
    - name: apt-get install crudini
      apt:
        name: crudini
    - name: Install python-pip
      apt:
        name: python-pip
        state: latest
    - name: upgrade pip
      command: pip install --upgrade pip
    
    - name: Install dependencies
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - python-dev
        - libffi-dev
        - gcc
        - libssl-dev
        - python-selinux
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - libltdl7
    - name: Install git
      apt:
        name: git
        update_cache: yes
        state: latest

    - name: Clone git
      git:
        repo: https://git.openstack.org/openstack/kolla
        version: "{{ GIT_BRANCH }}"
        dest: "{{ GIT_CLONE_PATH }}"
      when: GIT_BRANCH == "stable/queens"

    - name: switch to queens branch
      command: git checkout "{{ GIT_BRANCH }}"
      args:
       chdir: "{{ GIT_CLONE_PATH }}"
      when: (GIT_BRANCH == "stable/queens") and ((KOLLA_ANSIBLE_TAG is undefined) or (KOLLA_ANSIBLE_TAG is none) or (KOLLA_ANSIBLE_TAG | trim == ''))

    - name: switch to queens via tag
      command: "git checkout tags/{{ KOLLA_TAG }}"
      args:
       chdir: "{{ GIT_CLONE_PATH }}"
      when: (GIT_BRANCH == "stable/queens") and (not((KOLLA_ANSIBLE_TAG is undefined) or (KOLLA_ANSIBLE_TAG is none) or (KOLLA_ANSIBLE_TAG | trim == '')))

    - name: Copying Docker package file in /home/ubuntu
      copy:
       src: "{{BASE_FILE_PATH}}docker-engine_17.05.0-ce-0-ubuntu-xenial_amd64.deb"
       dest: "{{ DOCKER_LIST_DEST }}"
      when: GIT_BRANCH == "stable/queens"

    - name: dpkgi -i docker-engine=17.05~xenial
      command: dpkg -i "{{ DOCKER_LIST_DEST }}"
      when: GIT_BRANCH == "stable/queens"

    - name: apt-get update again
      apt:
        update_cache: yes
      when: GIT_BRANCH == "stable/queens"

    - name: Make directory docker.service.d
      file: 
       dest: /etc/systemd/system/docker.service.d
       state: directory 

    - name: Copy http-proxy.conf in the docker.service.d directory
      copy:
       src: "{{BASE_FILE_PATH}}http-proxy_bak.conf"
       dest: "{{ HTTP_PROXY_DEST }}"

    - name: replace data in http-proxy.conf
      lineinfile:
        dest: "{{ HTTP_PROXY_DEST }}"
        regexp: 'Environment="HTTP_PROXY="'
        line: 'Environment="HTTP_PROXY={{ http_proxy }}"'

    - name: Copy kolla.conf in the docker.service.d directory
      when: GIT_BRANCH == "stable/queens"
      copy:
       src: "{{BASE_FILE_PATH}}kolla.conf"
       dest: "{{ KOLLA_CONF_DEST }}"

    - name: Install ansible
      pip:
       name: ansible
       version: 2.2.2.0
      when: GIT_BRANCH == "stable/queens"
   
    - name:  insert docker_opts in docker
      lineinfile:
        dest: "{{ DEFAULT_DOCKER_FILE }}"
        regexp: '^(.*)#DOCKER_OPTS="--dns 8.8.8.8 --dns 8.8.4.4"(.*)$'
        line: 'DOCKER_OPTS= "{{ DOCKER_OPTS }}"'
     
    - name: copy the file
      command: cp "{{ DOCKER_SERVICE_SRC }}" "{{ DOCKER_SERVICE_DEST }}"

    - name: append data in docker.service
      lineinfile:
        dest: "{{ DOCKER_SERVICE_DEST }}"
        line: "EnvironmentFile=-/etc/default/docker \nMountFlags=shared"
        insertafter: '^\[Service\]'
        state: present

    - name: replace data in docker.service
      lineinfile:
        dest: "{{ DOCKER_SERVICE_DEST }}"
        regexp: 'ExecStart=/usr/bin/dockerd -H fd://'
        line: "ExecStart=/usr/bin/dockerd -H fd:// $DOCKER_OPTS"

    - name: changes in docker  http-proxy file
      lineinfile:
        dest: "{{ HTTP_PROXY_DEST }}"
        regexp: 'Environment="HTTP_PROXY={{ http_proxy }}"'
        line: 'Environment="HTTP_PROXY={{ http_proxy }}" "NO_PROXY={{ no_proxy }}"'


    - name: copy daemon.json
      copy:
       src: "{{BASE_FILE_PATH}}daemon.json"
       dest: "{{ DAEMON_DOCKER_FILE_DEST }}"



    - name: systemctl daemon-reload
      command: systemctl daemon-reload

    - name: systemctl restart docker
      command: systemctl restart docker


    - name: install requirements
      pip:
        requirements: "{{ REQUIREMENT_KOLLA }}"

    - name: install test requirements
      pip:
        requirements: "{{ TEST_REQUIREMENT_KOLLA }}"

    - name: replace data in template-override
      lineinfile:
        dest: "{{ GIT_CLONE_PATH }}/contrib/template-override/ovs-dpdk.j2"
        line: 'ENV RTE_DEVEL_BUILD="n"'
        insertafter: 'WORKDIR /dpdk'
        state: present
    - name : install kolla
      command: pip install "{{ GIT_CLONE_PATH }}"

    - name: install tox
      pip:
         name: tox


    - name : genconfig command
      command: tox -e genconfig
      args:
         chdir: "{{ GIT_CLONE_PATH }}"

    - name: Changes in ceilometer Docker file
      blockinfile:
       dest: "{{ CEILOMETER_FILE_PATH }}"
       insertafter: "^(.*)as macros with context(.*)$"
       block: |
         RUN apt-get update
         RUN apt-get install -y apache2

    - name: add kolla-build.conf
      copy:
         src: "{{BASE_FILE_PATH}}kolla-build.conf"
         dest: /etc/kolla/
         backup: yes
