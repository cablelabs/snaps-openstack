---
- hosts: "{{ target }}"
  become: true
#  become_user: root
  vars_files:
    - "{{ PROXY_DATA_FILE }}"
    - "{{ VARIABLE_FILE }}"
    - "{{BASE_FILE_PATH}}globals.yml"
    - "{{BASE_FILE_PATH}}netvars.yml"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ no_proxy }}"
  tasks:

    - name: apt-get update
      apt:
        update_cache: yes

    - name: Install python-pip
      apt:
        name: python-pip
        state: latest
    - name: upgrade pip
      command: pip install --upgrade pip

    - name: Install dependencies
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - python-dev
        - libffi-dev
        - gcc
        - libssl-dev
        - python-selinux
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - libltdl7
        - aufs-tools
        - network-manager
        - crudini

    - name: Clone git
      git:
        repo: https://github.com/openstack/kolla-ansible.git
        version: "{{ GIT_BRANCH }}"
        dest: "{{ GIT_CLONE_PATH }}"

    - name: Install git
      apt:
        name: git
        update_cache: yes
        state: latest

    - name: Clone git
      git:
        repo: https://github.com/openstack/kolla-ansible.git
        version: "{{ GIT_BRANCH }}"
        dest: "{{ GIT_CLONE_PATH_QUEENS }}"

    - name: switch to queens branch
      command: git checkout "{{ GIT_BRANCH }}"
      args:
       chdir: "{{ GIT_CLONE_PATH_QUEENS }}"
      when: ((KOLLA_ANSIBLE_TAG is undefined) or (KOLLA_ANSIBLE_TAG is none) or (KOLLA_ANSIBLE_TAG | trim == ''))

    - name: switch to queens via tag
      command: "git checkout tags/{{ KOLLA_ANSIBLE_TAG }}"
      args:
       chdir: "{{ GIT_CLONE_PATH_QUEENS }}"
      when: not((KOLLA_ANSIBLE_TAG is undefined) or (KOLLA_ANSIBLE_TAG is none) or (KOLLA_ANSIBLE_TAG | trim == ''))

    - name: install requirements
      pip:
        requirements: "{{ REQUIREMENT_KOLLA_ANSIBLE }}"
    - name: replace data in ovsdpdk-db.json.j2
      lineinfile:
        dest: "{{ GIT_CLONE_PATH_QUEENS }}/ansible/roles/ovs-dpdk/templates/ovsdpdk-db.json.j2"
        regexp: '^(.*)    "command": "start-ovsdb-server(.*)$'
        line: '    "command": "start-ovsdb-server 127.0.0.1",'
        backrefs: yes

    - name: replace data in setup.cfg
      lineinfile:
        dest: "{{ GIT_CLONE_PATH_QUEENS }}/setup.cfg"
        line: "    share/kolla-ansible/tools = tools/ovs-dpdkctl.sh"
        insertafter: '^\    share/kolla-ansible/tools = tools/stop-containers'
        state: present
    - name: run setup.py
      command: python setup.py install
      args:
       chdir: "{{ GIT_CLONE_PATH_QUEENS }}"

    - name: Copying Docker package file in /home/ubuntu
      copy:
       src: "{{BASE_FILE_PATH}}docker-engine_17.05.0-ce-0-ubuntu-xenial_amd64.deb"
       dest: "{{ DOCKER_LIST_DEST }}"

    - name: dpkgi -i docker-engine=17.05~xenial
      command: dpkg -i "{{ DOCKER_LIST_DEST }}"


    - name: apt-get update again
      apt:
        update_cache: yes


    - name: Install ntp
      apt:
       name: ntp
       state: latest


    - name: Make directory docker.service.d
      file:
       dest: /etc/systemd/system/docker.service.d
       state: directory

    - name: Copy http-proxy.conf in the docker.service.d directory
      copy:
       src: "{{BASE_FILE_PATH}}http-proxy_bak.conf"
       dest: "{{ HTTP_PROXY_DEST }}"


    - name: replace data in http-proxy.conf
      lineinfile:
        dest: "{{ HTTP_PROXY_DEST }}"
        regexp: 'Environment="HTTP_PROXY="'
        line: 'Environment="HTTP_PROXY={{ http_proxy }}"'


    - name: Copy kolla.conf in the docker.service.d directory
      when: GIT_BRANCH == "stable/queens"
      copy:
       src: "{{BASE_FILE_PATH}}kolla.conf"
       dest: "{{ KOLLA_CONF_DEST }}"

    - name: Install ansible
      pip:
       name: ansible
       version: 2.2.2.0
      when: enable_ovs_dpdk == "no"
    - name: Install ansible for dpdk
      pip:
       name: ansible
       version: 2.3.1.0
      when: enable_ovs_dpdk == "yes"
    - name:  insert docker_opts in docker
      lineinfile:
        dest: "{{ DEFAULT_DOCKER_FILE }}"
        regexp: '^(.*)#DOCKER_OPTS="--dns 8.8.8.8 --dns 8.8.4.4"(.*)$'
        line: 'DOCKER_OPTS= "{{ DOCKER_OPTS }}"'


    - name: copy the file
      command: cp "{{ DOCKER_SERVICE_SRC }}" "{{ DOCKER_SERVICE_DEST }}"

    - name: append data in docker.service
      lineinfile:
        dest: "{{ DOCKER_SERVICE_DEST }}"
        line: "EnvironmentFile=-/etc/default/docker \nMountFlags=shared"
        insertafter: '^\[Service\]'
        state: present

    - name: replace data in docker.service
      lineinfile:
        dest: "{{ DOCKER_SERVICE_DEST }}"
        regexp: 'ExecStart=/usr/bin/dockerd -H fd://'
        line: "ExecStart=/usr/bin/dockerd -H fd:// $DOCKER_OPTS"

    - name:
      lineinfile:
        dest: "{{ HTTP_PROXY_DEST }}"
        regexp: 'Environment="HTTP_PROXY={{ http_proxy }}"'
        line: 'Environment="HTTP_PROXY={{ http_proxy }}" "NO_PROXY=localhost,{{ no_proxy }}"'

    - name: copy daemon.json
      copy:
       src: "{{BASE_FILE_PATH }}daemon.json"
       dest: "{{ DAEMON_DOCKER_FILE_DEST }}"
      when: PULL_HUB != "yes" 

    - name: systemctl daemon-reload
      command: systemctl daemon-reload

    - name: systemctl restart docker
      command: systemctl restart docker


    - name: add line to /etc/modules
      lineinfile:
       dest: /etc/modules
       line: 'configfs'
      when: enable_cinder == "yes"
    - name: load uio_pci_generic kernel module
      shell: modprobe uio_pci_generic
      ignore_errors: True
      when: enable_ovs_dpdk == "yes"
    - name: load vfio_pci kernel module
      shell: modprobe vfio_pci
      ignore_errors: True
      when: enable_ovs_dpdk == "yes"
    - name: add line to /etc/modules
      lineinfile:
       dest: /etc/modules
       line: 'uio_pci_generic'
      when: enable_ovs_dpdk == "yes"
    - name: add line to /etc/modules
      lineinfile:
       dest: /etc/modules
       line: 'vfio_pci'
      when: enable_ovs_dpdk == "yes"

    - name: update-initramfs
      command: update-initramfs -u
      ignore_errors: True
      when: enable_cinder == "yes"

    - name: systemctl stop open-iscsi
      command: systemctl stop open-iscsi
      when: enable_cinder == "yes"

    - name: systemctl disable open-iscsi
      command: systemctl disable open-iscsi
      when: enable_cinder == "yes"

    - name: systemctl stop iscsid
      command: systemctl stop iscsid
      when: enable_cinder == "yes"

    - name: systemctl disable iscsid
      command: systemctl disable iscsid
      when: enable_cinder == "yes"


    - name: Extract IP of the neutron_external_interface - {{ neutron_external_interface }}
      shell: ip a show "{{ neutron_external_interface }}" | grep inet | grep global | awk '{ print$2}'
      register: extip
    - debug:
        var: extip

    - name: insert/update br-ex & default configuration in /etc/network/interfaces
      lineinfile:
        dest: /etc/network/interfaces
        backup: yes
        line: "auto br-ex\n
           iface br-ex inet static\n
               address {{ item }}\n
               netmask 255.255.255.0\n"
        state: present
      with_items: "{{extip.stdout_lines.0}}"
      ignore_errors: True
      when : enable_ovs_dpdk == "no"
    - name: insert route details for br-ex
      lineinfile:
        dest: /etc/network/interfaces
        backup: yes
        line:  "up route add default gw {{ external_gw }} dev br-ex\npost-up sleep 5; for i in $(ip -6 r | grep {{ neutron_external_interface }} | awk {'print $1'}); do ip -6 r d $i dev {{ neutron_external_interface }}; done\npost-up ip addr flush {{ neutron_external_interface }}"
      ignore_errors: True
      when : enable_ovs_dpdk == "no"
    - name: insert/update dpdk_bridge & default configuration in /etc/network/interfaces
      lineinfile:
        dest: /etc/network/interfaces.d/dpdk_bridge.cfg
        backup: yes
        line: "gateway {{ external_gw }}"
        state: present
      ignore_errors: True
      when: enable_ovs_dpdk == "yes"	
    - name: Edit the file /etc/default/grub for SRIOV
      lineinfile:
         dest: "/etc/default/grub"
         state: present
         line: 'GRUB_CMDLINE_LINUX_DEFAULT="$GRUB_CMDLINE_LINUX_DEFAULT nomdmonddf nomdmonisw intel_iommu=on iommu=pt"'
      when : enable_neutron_sriov == "yes"
    
    - name: Update grub
      command: update-grub
      when : enable_neutron_sriov == "yes"

    - name: "Reboot if required"
      shell: sleep 1 && shutdown -r now 'Reboot required'
      become: true
      async: 1
      poll: 0
      ignore_errors: true
      when: enable_neutron_sriov == "yes"

    - name: "Wait for reboot"
      local_action: wait_for host={{ target }} port=22 delay=10 state=started
      become: false
      when: enable_neutron_sriov == "yes"
  
    - name: set up the sriov interface
      shell: ip link set {{ item }} up
      with_items: "{{ SRIOV_INTERFACE }}"
      when: enable_neutron_sriov == "yes"

    - name: Determine the maximum number of VFs a PF can support and Create VFs via the PCI SYS interface
      shell: "cat /sys/class/net/{{ item }}/device/sriov_totalvfs  >  /sys/class/net/{{ item }}/device/sriov_numvfs"
      with_items: "{{ SRIOV_INTERFACE }}" 
      when: enable_neutron_sriov == "yes"
 
    - name: Persist created VFs on reboot
      lineinfile:
        dest: /etc/rc.local
        backup: yes
        line: "cat /sys/class/net/{{ item }}/device/sriov_totalvfs  >  /sys/class/net/{{ item }}/device/sriov_numvfs"
        insertbefore: "exit 0"
      with_items: "{{ SRIOV_INTERFACE }}"
      when: enable_neutron_sriov == "yes"
   

