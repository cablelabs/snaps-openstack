---
# Copyright 2017 ARICENT HOLDINGS LUXEMBOURG SARL. and
# Cable Television Laboratories, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- hosts: "{{ target }}"
  become: true
#  become_user: root
  vars_files:
    - "{{ PROXY_DATA_FILE }}"
    - "{{ VARIABLE_FILE }}"
    - "{{BASE_FILE_PATH}}globals.yml"
    - "{{BASE_FILE_PATH}}netvars.yml"

  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ no_proxy }}"

  tasks:
    - name: apt-get update
      apt:
        update_cache: yes

    - name: Install python-pip
      apt:
        name: python-pip
        state: latest

    - name: Install ntp
      apt:
       name: ntp
       state: latest

    - name: Install parted
      apt:
        name: parted
        state: latest

    - name: Install dependencies
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - python-dev
        - libffi-dev
        - gcc
        - libssl-dev

    - name: Install git
      apt:
        name: git
        update_cache: yes
        state: latest

    - name: Copy kolla
      copy:
         src: "{{BASE_FILE_PATH}}kolla.tar.gz"
         dest: /etc/OpenStack/
    - name: untar kolla
      command: tar -xvzf /etc/OpenStack/kolla.tar.gz -C /etc/OpenStack/

#    - name: Clone git
#      git:
#        repo: https://git.openstack.org/openstack/kolla
#        version: stable/newton
#        dest: "{{ GIT_CLONE_PATH }}"

#    - name: switch to newton branch
#      command: git checkout stable/newton
#      args:
#       chdir: "{{ GIT_CLONE_PATH }}"
    - name: run start-registry command
      command: docker run -d -p 4000:5000 --restart=always --name registry  registry:2
      ignore_errors: True

    - name: replace data in init-runonce script
      replace:
        dest: '/etc/OpenStack/kolla/tools/init-runonce'
        regexp: '^(.*)neutron subnet-create --name 1-subnet --allocation-pool start=172.19.27.250,end=172.19.27.230 public1 172.19.27.0/24 --gateway 172.19.27.1(.*)$'
        replace: 'neutron subnet-create --name 1-subnet --allocation-pool start={{START_IP}},end={{END_IP}} public1 {{EXT_SUB}} --gateway {{EXT_GW}}'

    - lineinfile:
       destfile: '/etc/OpenStack/kolla/tools/init-runonce'
       state: absent
       regexp:  '(.*)neutron net-create demo-net --provider:network_type vxlan(.*)$'

    - lineinfile:
       destfile: '/etc/OpenStack/kolla/tools/init-runonce'
       state: absent
       regexp:  '(.*)neutron subnet-create demo-net 10.0.0.0/24 --name demo-subnet --gateway 10.0.0.1 --dns-nameservers list=true 8.8.8.8(.*)$'

    - lineinfile:
       destfile: '/etc/OpenStack/kolla/tools/init-runonce'
       state: absent
       regexp:  '(.*)neutron router-interface-add demo-router demo-subnet(.*)$'

    - lineinfile:
       destfile: '/etc/OpenStack/kolla/tools/init-runonce'
       line: 'openstack role add --project admin --user admin heat_stack_owner'
       insertbefore: 'cat << EOF'


    - name: Copying Docker package file in /home/ubuntu
      copy:
       src: "{{BASE_FILE_PATH}}docker-engine_1.12.0-0-xenial_amd64.deb"
       dest: "{{ DOCKER_LIST_DEST }}"

    - name: install additional packages
      command: apt-get -y install apt-transport-https ca-certificates

    - name: apt-get update again
      apt:
        update_cache: yes


#    - name: apt-get install docker-engine=1.12.0-0~xenial
#      command: apt-get -y --allow-unauthenticated  install docker-engine=1.12.0-0~xenial
    - name: dpkgi -i docker-engine=1.12.0-0~xenial
      command: dpkg -i "{{ DOCKER_LIST_DEST }}"


    - name: Make directory docker.service.d
      file:
       dest: /etc/systemd/system/docker.service.d
       state: directory

    - name: Copy http-proxy.conf in the docker.service.d directory
      copy:
       src: "{{BASE_FILE_PATH}}http-proxy_bak.conf"
       dest: "{{ HTTP_PROXY_DEST }}"

    - name: replace data in http-proxy.conf
      lineinfile:
        dest: "{{ HTTP_PROXY_DEST }}"
        regexp: 'Environment="HTTP_PROXY="'
        line: 'Environment="HTTP_PROXY={{ http_proxy }}"'

    - name: Copy kolla.conf in the docker.service.d directory
      copy:
       src: "{{BASE_FILE_PATH}}kolla.conf"
       dest: "{{ KOLLA_CONF_DEST }}"

    - name: Install ansible
      pip:
       name: ansible
       version: 2.0.0.2

    - name: Install docker-py
      pip:
       name: docker-py
       version: 1.7.2

#    - name: insert docker_opts in docker
#      lineinfile:
#        dest: "{{ DEFAULT_DOCKER_FILE }}"
#        line: 'DOCKER_OPTS= "{{ DOCKER_OPTS }}"'

    - name:  insert docker_opts in docker
      lineinfile:
        dest: "{{ DEFAULT_DOCKER_FILE }}"
        regexp: '^(.*)#DOCKER_OPTS="--dns 8.8.8.8 --dns 8.8.4.4"(.*)$'
        line: 'DOCKER_OPTS= "{{ DOCKER_OPTS }}"'

    - name: copy the file
      command: cp "{{ DOCKER_SERVICE_SRC }}" "{{ DOCKER_SERVICE_DEST }}"

    - name: append data in docker.service
      lineinfile:
        dest: "{{ DOCKER_SERVICE_DEST }}"
        line: "EnvironmentFile=-/etc/default/docker \nMountFlags=shared"
        insertafter: '^\[Service\]'
        state: present

    - name: replace data in docker.service
      lineinfile:
        dest: "{{ DOCKER_SERVICE_DEST }}"
        regexp: 'ExecStart=/usr/bin/dockerd -H fd://'
        line: "ExecStart=/usr/bin/dockerd -H fd:// $DOCKER_OPTS"

    - name: changes in docker  http-proxy file
      lineinfile:
        dest: "{{ HTTP_PROXY_DEST }}"
        regexp: 'Environment="HTTP_PROXY={{ http_proxy }}"'
        line: 'Environment="HTTP_PROXY={{ http_proxy }}" "NO_PROXY={{ no_proxy }}"'

    - name: copy daemon.json
      copy:
       src: "{{BASE_FILE_PATH}}daemon.json"
       dest: "{{ DAEMON_DOCKER_FILE_DEST }}"

    - name: systemctl daemon-reload
      command: systemctl daemon-reload

    - name: systemctl restart docker
      command: systemctl restart docker


    - name: Copy all.yml
      when: enable_magnum == "yes"
      copy:
       src: "{{BASE_FILE_PATH}}all.yml"
       dest: "{{ ALL_DEST }}"

    - name: Copy start.yml
      when: enable_magnum == "yes"
      copy:
       src: "{{BASE_FILE_PATH}}start.yml"
       dest: "{{ START_DEST }}"

    - name: Copy contents of /etc/OpenStack/kolla/etc/kolla/ to /etc/kolla
      command: cp -r /etc/OpenStack/kolla/etc/kolla/ /etc/

    - name: Copy /usr/local/share/kolla/ansible/inventory/ to /etc/kolla_packages/source/
      copy:
       src: "{{BASE_FILE_PATH}}inventory"
       dest: "{{ INVENTORY_DEST }}"

    - name: Copy globals.yml in the /etc/kolla directory
      copy:
       src: "{{BASE_FILE_PATH}}globals.yml"
       dest: "{{ GLOBAL_FILE_DEST }}"


    - name: kolla generate passwords
      command: kolla-genpwd


    - name: kolla ansible prechecks
      command: kolla-ansible prechecks  -i "{{ MULTINODE_FILE }}"

    - name: kolla ansible deploy
      command: kolla-ansible deploy  -i "{{ MULTINODE_FILE }}"

    - name: kolla ansible post deploy
      command: kolla-ansible post-deploy

    - name: Extract IP of the neutron_external_interface
      shell: ip a show "{{ neutron_external_interface }}" | grep inet | grep global | awk '{ print$2}'
      register: extip
    - debug:
        var: extip

#    - name: Netwokring bridge adaptation
#      command: ifconfig "{{ neutron_external_interface }}" 0 up
#      ignore_errors: True

#    - name: Delete conn neutron_external_interface using nmcli
#      command: ifconfig "{{ neutron_external_interface }}" 0 up
#      command: nmcli conn del "{{ neutron_external_interface }}"
#      ignore_errors: True

    - name: Flush IP from neutron_external_interface
      command: ip addr flush  "{{ neutron_external_interface }}"
      ignore_errors: True
#    - name: Set Ip to BR-ex
#      command: "ifconfig br-ex {{ item }} up"
#      ignore_errors: True
#      with_items: "{{extip.stdout_lines|list}}"
    - name: Flush bridg-ex IP
      command: ip addr flush br-ex
      ignore_errors: True

    - pause:
        seconds: 5

    - name: Set Ip to BR-ex
      command: ip addr add {{ item }} dev br-ex
#      command: nmcli con add con-name br-ex ifname br-ex type ethernet ip4 {{ item }} gw4 "{{ external_gw }}"
      ignore_errors: True
      with_items: "{{extip.stdout_lines|list}}"

#    - name: Set Br-ex as gateway
#      command: ip route add default via "{{ external_gw }}" dev br-ex
#      ignore_errors: True

    - pause:
        seconds: 5

    - name: Bring br-ex interface up
      command: ip link set br-ex up

    - pause:
        seconds: 5

    - name: Set Br-ex a defaults gateway route
      command: ip route add default via "{{ external_gw }}" dev br-ex
      ignore_errors: True

    - name: insert/update br-ex & default configuration in /etc/network/interfaces
      blockinfile:
        path: /etc/network/interfaces
        backup: yes
        block: |
           auto br-ex
           iface br-ex inet static
               address {{ item }}
               netmask 255.255.255.0
               gateway "{{ external_gw }}"

           up route add default gw "{{ external_gw }}" dev br-ex
        state: present
      with_items: "{{extip.stdout_lines|list}}"
      ignore_errors: True


    - name: get horizon container id
      command: "docker ps -a -q  --filter ancestor={{ DOCKER_REGISTRY_IP }}/kolla/ubuntu-source-horizon:3.0.4"
      register: id

    - debug:
       var: id.stdout
    - name: POST CLUD UP Operation to launch magnum
      copy:
       src: "{{BASE_FILE_PATH}}magnum_script.sh"
       dest: "{{ MAGNUM_FILE_DEST }}"
      when: enable_magnum == "yes"

    - name: copy script
      command: "docker cp {{ MAGNUM_FILE_DEST }} {{ id.stdout }}:/magnum_script.sh"
      when: enable_magnum == "yes"

    - name: change permission
      command: "docker exec {{ id.stdout }} chmod 755 /magnum_script.sh"
      when: enable_magnum == "yes"

    - name: run magnum_script
      shell: "docker exec {{ id.stdout }} /magnum_script.sh {{ http_proxy }} {{ https_proxy }}"
      when: enable_magnum == "yes"
      args:
       executable: /bin/bash

    - name: Changing perm of "/etc/kolla/admin-openrc.sh", adding "+x"
      file: dest=/etc/kolla/admin-openrc.sh mode=a+x

    - name: Changing perm of "/usr/local/share/kolla/init-runonce.sh", adding "+x"
      file: dest=/usr/local/share/kolla/init-runonce mode=a+x

    - name: apt-get python-openstackclient
      command: apt-get -y install python-openstackclient

    - name: apt-get python-neutronclient
      command: apt-get -y install python-neutronclient

    - name: apt-get python-novaclient
      command: apt-get -y install python-novaclient




    - name: run admin-openrc script
      shell: source /etc/kolla/admin-openrc.sh && chmod 777 /etc/OpenStack/kolla/tools/init-runonce && /etc/OpenStack/kolla/tools/init-runonce
      args:
       executable: /bin/bash



    - name: replace data in local_settings
      lineinfile:
        dest: "{{ LOCAL_SETTING_HORIZON }}"
        regexp: 'COMPRESS_OFFLINE = True'
        line: 'COMPRESS_OFFLINE = False'


    - name: replace data in local_settings
      lineinfile:
        dest: "{{ LOCAL_SETTING_HORIZON }}"
        regexp: 'TIME_ZONE = "UTC"'
        line: 'TIME_ZONE = "Etc/UTC"'

    - name: check values for MTU parameters
      command: grep -inr global_physnet_mtu /etc/kolla
      register: global_physnet_mtu
      ignore_errors: True

    - name: Modifying neutron.conf for MTU size
      command: find /etc/kolla -type f -exec sed -i 's/core_plugin = ml2/core_plugin = ml2\nglobal_physnet_mtu = {{ DEFAULT }}/g' {} \;
      when: not global_physnet_mtu.stdout
      ignore_errors: True

    - name: Modifying ml2_conf.ini for MTU size
      command: find /etc/kolla -type f -exec sed -i 's/type_drivers = flat,vlan,vxlan/type_drivers = flat,vlan,vxlan\nphysical_network_mtus = physnet1:{{ DEFAULT }}\npath_mtu = {{ VXLAN}}/g' {} \;
      when: not global_physnet_mtu.stdout
      ignore_errors: True


#Changes for MTU size
#    - name: Modifying neutron.conf for MTU size
#      command: find /etc/kolla -type f -exec sed -i 's/core_plugin = ml2/core_plugin = ml2\nglobal_physnet_mtu = {{ MTU_SIZE }}/g' {} \;
#      when: global_physnet_mtu.stdout
#      ignore_errors: True
#
#    - name: Modifying ml2_conf.ini for MTU size
#      command: find /etc/kolla -type f -exec sed -i 's/type_drivers = flat,vlan,vxlan/type_drivers = flat,vlan,vxlan\npath_mtu = {{ MTU_SIZE }}/g' {} \;
#      ignore_errors: True

    - name: systemctl daemon-reload
      command: systemctl daemon-reload


    - name: systemctl restart docker
      command: systemctl restart docker

    - name: YOUR CLOUD IS up after few second ..Wait for cloud to comeup
      shell: "sleep 90"

#    - name: Configuring nodes with static ip
#      lineinfile:
#          dest: /etc/network/interfaces
#          state: present
#          backrefs: yes
#          regexp: 'iface {{ network_interface }} inet dhcp'
#          line: "iface {{ network_interface }} inet static\naddress {{ target }}\nnetmask 255.255.255.0\ngateway {{ external_gw }}"
#
#    - name: Restart networking service
##      command: /etc/init.d/networking restart

#    - name: get horizon container id
#      command: "docker ps -a -q  --filter ancestor={{ DOCKER_REGISTRY_IP }}/kolla/ubuntu-source-horizon:3.0.4"
#      register: id

#    - debug:
#       var: id.stdout
#    - name: POST CLUD UP Operation to launch magnum
#      copy:
#       src: "{{BASE_FILE_PATH}}magnum_script.sh"
#       dest: "{{ MAGNUM_FILE_DEST }}"
#      when: enable_magnum == "yes"

#    - name: copy script
#      command: "docker cp {{ MAGNUM_FILE_DEST }} {{ id.stdout }}:/magnum_script.sh"
#      when: enable_magnum == "yes"

#    - name: change permission
#      command: "docker exec {{ id.stdout }} chmod 755 /magnum_script.sh"
#      when: enable_magnum == "yes"

#    - name: run magnum_script
#      shell: "docker exec {{ id.stdout }} /magnum_script.sh {{ http_proxy }} {{ https_proxy }}"
#      when: enable_magnum == "yes"
#      args:
#       executable: /bin/bash
