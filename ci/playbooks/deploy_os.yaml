# Copyright (c) 2017 Cable Television Laboratories, Inc. ("CableLabs")
#                    and others.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- hosts: all
  become: yes
  become_method: sudo
  become_user: root

  tasks:
    - name: Install Git
      apt: name=git

    - name: Install sshpass
      apt: name=sshpass

    - name: Install Pip
      apt: name=python-pip

    - name: Install pyyaml
      pip:
        name: pyyaml

    - name: Install six
      become: yes
      become_method: sudo
      become_user: root
      pip:
        name: six

    - name: Install ansible 2.3
      pip:
        name: ansible
        version: 2.3.0.0

    - name: Install pathlib
      pip:
        name: pathlib

    - name: Delete existing snaps-openstack directory - {{ src_copy_dir }}/snaps-openstack
      file:
        state: absent
        dest: "{{ src_copy_dir }}/snaps-openstack"

    - name: Copy this source tree to - {{ src_copy_dir }}/snaps-openstack
      synchronize:
        src: ../../../
        dest: "{{ src_copy_dir }}/snaps-openstack"
        rsync_opts:
          - "--no-motd"
          - "--exclude=.git"

    - name: Delete root's private key - /root/.ssh/id_rsa
      file:
        state: absent
        dest: /root/.ssh/id_rsa

    - name: Delete root's public key - /root/.ssh/id_rsa.pub
      file:
        state: absent
        dest: /root/.ssh/id_rsa.pub - /root/.ssh/id_rsa

    - name: Generate root's key
      command: ssh-keygen -P '' -f /root/.ssh/id_rsa

    - name: Copy root's key to node 1 @{{ admin_ip_1 }}
      command: "sshpass -p \"{{ node_host_pass }}\" ssh-copy-id -i /root/.ssh/id_rsa.pub -o StrictHostKeyChecking=no root@{{ admin_ip_1 }}"
      retries: 30
      delay: 3
      register: result
      until: result.rc == 0

    - name: Copy root's key to node 2 @{{ admin_ip_2 }}
      command: "sshpass -p \"{{ node_host_pass }}\" ssh-copy-id -i /root/.ssh/id_rsa.pub -o StrictHostKeyChecking=no root@{{ admin_ip_2 }}"
      retries: 30
      delay: 3
      register: result
      until: result.rc == 0

    - name: Copy root's key to node 3 @{{ admin_ip_3 }}
      command: "sshpass -p {{ node_host_pass }} ssh-copy-id -i /root/.ssh/id_rsa.pub -o StrictHostKeyChecking=no root@{{ admin_ip_3 }}"
      retries: 30
      delay: 3
      register: result
      until: result.rc == 0

    - name: Modify Build server configfs
      command: "modprobe configfs"

    - name: Restart Build server sys-kernel-config.mount
      command: "systemctl restart sys-kernel-config.mount"

    - name: Modify Node 1 configfs
      command: "ssh root@{{ admin_ip_1 }} 'modprobe configfs'"

    - name: Restart Node 1 sys-kernel-config.mount
      command: "ssh root@{{ admin_ip_1 }} 'systemctl restart sys-kernel-config.mount'"

    - name: Modify Node 2 configfs
      command: "ssh root@{{ admin_ip_2 }} 'modprobe configfs'"

    - name: Restart Node 2 sys-kernel-config.mount
      command: "ssh root@{{ admin_ip_2 }} 'systemctl restart sys-kernel-config.mount'"

    - name: Modify Node 3 configfs
      command: "ssh root@{{ admin_ip_3 }} 'modprobe configfs'"

    - name: Restart Node 3 sys-kernel-config.mount
      command: "ssh root@{{ admin_ip_3 }} 'systemctl restart sys-kernel-config.mount'"

    - name: Apply template and copy deployment.yaml.tmplt to {{ deployment_yaml_path }}
      action: template src=templates/deployment.yaml.tmplt dest={{ deployment_yaml_path }}

    - name: Deploy - iaas_launch.py -d *** This will run for around an hour without output
      become: yes
      become_method: sudo
      become_user: root
      command: "python {{ src_copy_dir }}/snaps-openstack/snaps-openstack/iaas_launch.py -f {{ deployment_yaml_path }} -d"
      register: out
      ignore_errors: True
    - debug: var=out.stdout_lines
    - debug: var=out.stderr_lines

    - name: Validating OpenStack deploy returned 0
      fail: msg="iaas_launch.py -d command failed"
      when: out.rc != 0
