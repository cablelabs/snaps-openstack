---
- hosts: "{{ target }}"
  become: true
#  become_user: root
  vars_files:
    - "{{ PROXY_DATA_FILE }}"
    - "{{ VARIABLE_FILE }}"
    - "{{BASE_FILE_PATH}}globals.yml"
    - "{{BASE_FILE_PATH}}netvars.yml"

  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ no_proxy }}"

  tasks:
    - name: apt-get update
      apt:
        update_cache: yes

    - name: Install python-pip
      apt:
        name: python-pip
        state: latest

    - name: upgrade ip
      command: pip install --upgrade pip

    - name: Install ntp
      apt:
       name: ntp
       state: latest

    - name: Install parted
      apt:
        name: parted
        state: latest

    - name: Install dependencies
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - python-dev
        - libffi-dev
        - gcc
        - libssl-dev
        - python-selinux
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - libltdl7

    - name: Install git
      apt:
        name: git
        update_cache: yes
        state: latest


    - name: Clone git
      git:
        repo: https://github.com/openstack/kolla-ansible.git
        version: "{{ GIT_BRANCH }}"
        dest: "{{ GIT_CLONE_PATH_PIKE }}"

    - name: switch to newton branch
      command: git checkout "{{ GIT_BRANCH }}"
      args:
       chdir: "{{ GIT_CLONE_PATH_PIKE }}"
    - name: install requirements
      pip:
        requirements: "{{ REQUIREMENT_KOLLA_ANSIBLE }}"

    - name: run setup.py
      command: python setup.py install
      args:
       chdir: "{{ GIT_CLONE_PATH_PIKE }}"


    - name: apt-get update again
      apt:
        update_cache: yes

    - name: run start-registry command
      command: docker run -d -p 4000:5000 --restart=always --name registry  registry:2
      ignore_errors: True

#    - name: replace data in init-runonce script
#      replace:
#        dest: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
#        regexp: '^(.*)neutron subnet-create --name 1-subnet --allocation-pool start=172.19.27.250,end=172.19.27.230 public1 172.19.27.0/24 --gateway 172.19.27.1(.*)$'
#        replace: 'neutron subnet-create --name 1-subnet --allocation-pool start={{START_IP}},end={{END_IP}} public1 {{EXT_SUB}} --gateway {{EXT_GW}}'

#    - lineinfile:
#       destfile: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
#       state: absent
#       regexp:  '(.*)neutron net-create demo-net --provider:network_type vxlan(.*)$'

#    - lineinfile:
#       destfile: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
#       state: absent
#       regexp:  '(.*)neutron subnet-create demo-net 10.0.0.0/24 --name demo-subnet --gateway 10.0.0.1 --dns-nameservers list=true 8.8.8.8(.*)$'

#    - lineinfile:
#       destfile: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
#       state: absent
#       regexp:  '(.*)neutron router-interface-add demo-router demo-subnet(.*)$'

#    - lineinfile:
#       destfile: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
#       line: 'openstack role add --project admin --user admin heat_stack_owner'
#       insertbefore: 'cat << EOF'

    - name: replace data in init-runonce script
      ignore_errors: True
      replace:
        dest: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
        regexp: ^(.*)EXT_NET_CIDR='10.0.2.0/24'(.*)$
        replace: EXT_NET_CIDR='{{EXT_SUB}}'

    - name: replace data in init-runonce script
      ignore_errors: True
      replace:
        dest: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
        regexp: ^(.*)EXT_NET_RANGE='start=10.0.2.150,end=10.0.2.199'(.*)$
        replace: EXT_NET_RANGE='start={{START_IP}},end={{END_IP}}'

    - name: replace data in init-runonce script
      ignore_errors: True
      replace:
        dest: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
        regexp: ^(.*)EXT_NET_GATEWAY='10.0.2.1'(.*)$
        replace: EXT_NET_GATEWAY='{{EXT_GW}}'

    - name: replace data in init-runonce script
      ignore_errors: True
      replace:
        dest: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
        regexp: '^(.*)openstack subnet create --no-dhcp (.*)$'
        replace: 'openstack subnet create \\'

    - lineinfile:
       destfile: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
       line: 'openstack role add --project admin --user admin heat_stack_owner'
       insertbefore: 'cat << EOF'
    - lineinfile:
       destfile: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
       line: 'curl -L -o ./Fedora-Atomic-25-20170512.2.x86_64.qcow2 https://ftp-stud.hs-esslingen.de/pub/Mirrors/alt.fedoraproject.org/atomic/stable/Fedora-Atomic-25-20170512.2/CloudImages/x86_64/images/Fedora-Atomic-25-20170512.2.x86_64.qcow2'
       insertbefore: 'echo Configuring neutron.'

    - lineinfile:
       destfile: '/etc/OpenStack/kolla-ansible/tools/init-runonce'
       line: "openstack image create --public --property os_distro='fedora-atomic' --disk-format qcow2 --container-format bare --file ./Fedora-Atomic-25-20170512.2.x86_64.qcow2 fedora-atomic.qcow2"
       insertbefore: 'echo Configuring neutron.'


    - name: Copying Docker package file in /home/ubuntu
      copy:
       src: "{{BASE_FILE_PATH}}docker-engine_17.05.0-ce-0-ubuntu-xenial_amd64.deb"
       dest: "{{ DOCKER_LIST_DEST_PIKE }}"

    - name: dpkgi -i docker-engine=17.05~xenial
      command: dpkg -i "{{ DOCKER_LIST_DEST_PIKE }}"


    - name: apt-get update again
      apt:
        update_cache: yes


    - name: Make directory docker.service.d
      file:
       dest: /etc/systemd/system/docker.service.d
       state: directory

    - name: Copy http-proxy.conf in the docker.service.d directory
      copy:
       src: "{{BASE_FILE_PATH}}http-proxy_bak.conf"
       dest: "{{ HTTP_PROXY_DEST }}"

    - name: replace data in http-proxy.conf
      lineinfile:
        dest: "{{ HTTP_PROXY_DEST }}"
        regexp: 'Environment="HTTP_PROXY="'
        line: 'Environment="HTTP_PROXY={{ http_proxy }}"'
    - name: Copy kolla.conf in the docker.service.d directory
      when: GIT_BRANCH == "stable/pike"
      copy:
       src: "{{BASE_FILE_PATH}}kolla_pike.conf"
       dest: "{{ KOLLA_CONF_DEST_PIKE }}"

    - name: Install ansible
      pip:
       name: ansible
       version: 2.2.2.0

    - name:  insert docker_opts in docker
      lineinfile:
        dest: "{{ DEFAULT_DOCKER_FILE }}"
        regexp: '^(.*)#DOCKER_OPTS="--dns 8.8.8.8 --dns 8.8.4.4"(.*)$'
        line: 'DOCKER_OPTS= "{{ DOCKER_OPTS }}"'

    - name: copy the file
      command: cp "{{ DOCKER_SERVICE_SRC }}" "{{ DOCKER_SERVICE_DEST }}"

    - name: append data in docker.service
      lineinfile:
        dest: "{{ DOCKER_SERVICE_DEST }}"
        line: "EnvironmentFile=-/etc/default/docker \nMountFlags=shared"
        insertafter: '^\[Service\]'
        state: present

    - name: replace data in docker.service
      lineinfile:
        dest: "{{ DOCKER_SERVICE_DEST }}"
        regexp: 'ExecStart=/usr/bin/dockerd -H fd://'
        line: "ExecStart=/usr/bin/dockerd -H fd:// $DOCKER_OPTS"

    - name: changes in docker  http-proxy file
      lineinfile:
        dest: "{{ HTTP_PROXY_DEST }}"
        regexp: 'Environment="HTTP_PROXY={{ http_proxy }}"'
        line: 'Environment="HTTP_PROXY={{ http_proxy }}" "NO_PROXY={{ no_proxy }}"'

    - name: copy daemon.json
      copy:
       src: "{{BASE_FILE_PATH}}daemon.json"
       dest: "{{ DAEMON_DOCKER_FILE_DEST }}"

    - name: systemctl daemon-reload
      command: systemctl daemon-reload

    - name: systemctl restart docker
      command: systemctl restart docker

    - name: add line to /etc/modules
      lineinfile:
       dest: /etc/modules
       line: 'configfs'
#      when: enable_cinder == "yes" and CHECK_VAR == "present"
      when: enable_cinder == "yes"

    - name: update-initramfs
      command: update-initramfs -u
      ignore_errors: True
#      when: enable_cinder == "yes" and CHECK_VAR == "present"
      when: enable_cinder == "yes"
    - name: systemctl stop open-iscsi
      command: systemctl stop open-iscsi
#      when: enable_cinder == "yes" and CHECK_VAR == "present"
      when: enable_cinder == "yes"
    - name: systemctl disable open-iscsi
      command: systemctl disable open-iscsi
#      when: enable_cinder == "yes" and CHECK_VAR == "present"
      when: enable_cinder == "yes"
    - name: systemctl stop iscsid
      command: systemctl stop iscsid
#      when: enable_cinder == "yes" and CHECK_VAR == "present"
      when: enable_cinder == "yes"
    - name: systemctl disable iscsid
      command: systemctl disable iscsid
#      when: enable_cinder == "yes" and CHECK_VAR == "present"
      when: enable_cinder == "yes"

    - name: add line to all.yml
      when: http_proxy!="" and enable_magnum == "yes"
      lineinfile:
       dest: "{{ ALL_DEST_PIKE }}"
       line: 'container_proxy: {}'


    - name: Copy main.yml
      when: http_proxy!="" and enable_magnum == "yes"
      copy:
       src: "{{BASE_FILE_PATH}}main.yml"
       dest: "{{ MAIN_DEST_PIKE }}"

    - name: Copy contents of /etc/OpenStack/kolla-ansible/etc/kolla/ to /etc/kolla
      command: cp -r /etc/OpenStack/kolla-ansible/etc/kolla/ /etc/

    - name: Copy /usr/local/share/kolla/ansible/inventory/ to /etc/kolla_packages/source/
      copy:
       src: "{{BASE_FILE_PATH}}inventory"
       dest: "{{ INVENTORY_DEST }}"

    - name: Copy globals.yml in the /etc/kolla directory
      copy:
       src: "{{BASE_FILE_PATH}}globals.yml"
       dest: "{{ GLOBAL_FILE_DEST }}"


    - name: kolla generate passwords
      command: kolla-genpwd


    - name: kolla ansible prechecks
      command: kolla-ansible prechecks  -i "{{ MULTINODE_FILE }}"

    - name: kolla ansible deploy
      command: kolla-ansible deploy  -i "{{ MULTINODE_FILE }}"

    - name: kolla ansible post deploy
      command: kolla-ansible post-deploy

    - name: Extract IP of the neutron_external_interface
      shell: ip a show "{{ neutron_external_interface }}" | grep inet | grep global | awk '{ print$2}'
      register: extip
    - debug:
        var: extip


#    - name: Delete conn neutron_external_interface using nmcli

#      command: nmcli conn del "{{ neutron_external_interface }}"
#      ignore_errors: True

    - name: Flush IP from neutron_external_interface
      command: ip addr flush  "{{ neutron_external_interface }}"
      ignore_errors: True

    - name: Flush bridg-ex IP
      command: ip addr flush br-ex
      ignore_errors: True

    - pause:
        seconds: 5

    - name: Set Ip to BR-ex
      command: ip addr add {{ item }} dev br-ex

      ignore_errors: True
      with_items: "{{extip.stdout_lines|list}}"


    - pause:
        seconds: 5

    - name: Bring br-ex interface up
      command: ip link set br-ex up

    - pause:
        seconds: 5

    - name: Set Br-ex a defaults gateway route
      command: ip route add default via "{{ external_gw }}" dev br-ex
      ignore_errors: True

    - name: insert/update br-ex & default configuration in /etc/network/interfaces
      blockinfile:
        dest: /etc/network/interfaces
        backup: yes
        block: |
           auto br-ex
           iface br-ex inet static
               address {{ item }}
               netmask 255.255.255.0
               gateway "{{ external_gw }}"

           up route add default gw "{{ external_gw }}" dev br-ex
        state: present
      with_items: "{{extip.stdout_lines|list}}"
      ignore_errors: True


    - name: Changing perm of "/etc/kolla/admin-openrc.sh", adding "+x"
      file: dest=/etc/kolla/admin-openrc.sh mode=a+x

    - name: apt-get python-openstackclient
      command: apt-get -y install python-openstackclient

    - name: apt-get python-neutronclient
      command: apt-get -y install python-neutronclient

    - name: apt-get python-novaclient
      command: apt-get -y install python-novaclient


    - name: run admin-openrc script
      shell: source /etc/kolla/admin-openrc.sh && /etc/OpenStack/kolla-ansible/tools/init-runonce
      args:
       executable: /bin/bash


    - name: check values for MTU parameters
      command: grep -inr global_physnet_mtu /etc/kolla
      register: global_physnet_mtu
      ignore_errors: True

    - name: Modifying neutron.conf for MTU size
      command: find /etc/kolla -type f -exec sed -i 's/core_plugin = ml2/core_plugin = ml2\nglobal_physnet_mtu = {{ DEFAULT }}/g' {} \;
      when: not global_physnet_mtu.stdout
      ignore_errors: True

    - name: Modifying ml2_conf.ini for MTU size
      command: find /etc/kolla -type f -exec sed -i 's/type_drivers = flat,vlan,vxlan/type_drivers = flat,vlan,vxlan\nphysical_network_mtus = physnet1:{{ DEFAULT }}\npath_mtu = {{ VXLAN}}/g' {} \;
      when: not global_physnet_mtu.stdout
      ignore_errors: True


#Changes for MTU size
#    - name: Modifying neutron.conf for MTU size
#      command: find /etc/kolla -type f -exec sed -i 's/core_plugin = ml2/core_plugin = ml2\nglobal_physnet_mtu = {{ MTU_SIZE }}/g' {} \;
#      when: global_physnet_mtu.stdout
#      ignore_errors: True
#
#    - name: Modifying ml2_conf.ini for MTU size
#      command: find /etc/kolla -type f -exec sed -i 's/type_drivers = flat,vlan,vxlan/type_drivers = flat,vlan,vxlan\npath_mtu = {{ MTU_SIZE }}/g' {} \;
#      ignore_errors: True

#    - name: Configuring nodes with static ip
#      lineinfile:
#          dest: /etc/network/interfaces
#          state: present
#          backrefs: yes
#          regexp: 'iface {{ network_interface }} inet dhcp'
#          line: "iface {{ network_interface }} inet static\naddress {{ target }}\nnetmask 255.255.255.0\ngateway {{ external_gw }}"
#
#    - name: Restart networking service
#      command: /etc/init.d/networking restart
